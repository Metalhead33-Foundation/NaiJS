/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    get: operations["AppController_healthCheck"];
  };
  "/user/register": {
    post: operations["UserController_createUser"];
  };
  "/user/login": {
    post: operations["UserController_loginUser"];
  };
  "/user/change-access-key": {
    post: operations["UserController_changeAccessKey"];
  };
  "/user/resend-email-verification": {
    post: operations["UserController_requestEmailVerification"];
  };
  "/user/verify-email": {
    post: operations["UserController_verifyEmail"];
  };
  "/user/information": {
    get: operations["UserController_getAccountInformation"];
  };
  "/user/deletion/request": {
    post: operations["UserController_requestAccountDeletion"];
  };
  "/user/deletion/delete": {
    post: operations["UserController_deleteAccount"];
  };
  "/user/recovery/request": {
    post: operations["UserController_requestAccountRecovery"];
  };
  "/user/recovery/recover": {
    post: operations["UserController_recoverAccount"];
  };
  "/user/delete": {
    post: operations["UserController_deleteAccountUnchecked"];
  };
  "/user/data": {
    get: operations["UserController_getUserData"];
  };
  "/user/priority": {
    get: operations["UserController_getCurrentPriority"];
  };
  "/user/giftkeys": {
    get: operations["UserController_getGiftKeys"];
  };
  "/user/subscription": {
    get: operations["UserController_getSubscription"];
  };
  "/user/keystore": {
    get: operations["UserController_getKeystore"];
    put: operations["UserController_updateKeystore"];
  };
  "/user/objects/{type}": {
    get: operations["UserController_getObjects"];
    put: operations["UserController_createObject"];
  };
  "/user/objects/{type}/{id}": {
    get: operations["UserController_getObject"];
    delete: operations["UserController_deleteObject"];
    patch: operations["UserController_editObject"];
  };
  "/user/clientsettings": {
    get: operations["UserController_getClientSettings"];
    put: operations["UserController_updateClientSettings"];
  };
  "/user/create-persistent-token": {
    post: operations["UserController_createPersistentToken"];
  };
  "/user/submission": {
    post: operations["UserController_postUserSubmission"];
  };
  "/user/submission/{event}": {
    get: operations["UserController_getUserSubmission"];
  };
  "/user/vote-submission/{event}": {
    get: operations["UserController_getUserSubmissionVotes"];
    post: operations["UserController_voteSubmission"];
    delete: operations["UserController_retractSubmissionVote"];
  };
  "/user/subscription/bind": {
    post: operations["SubscriptionController_bindSubscription"];
  };
  "/user/subscription/change": {
    post: operations["SubscriptionController_changeSubscriptionPlan"];
  };
  "/ai/generate": {
    post: operations["AIController_aiGenerate"];
  };
  "/ai/generate-prompt": {
    post: operations["AIController_aiGeneratePrompt"];
  };
  "/ai/generate-stream": {
    post: operations["AIController_aiGenerateStreamable"];
  };
  "/ai/annotate-image": {
    post: operations["AIController_annotateImage"];
  };
  "/ai/generate-image": {
    post: operations["AIController_aiGenerateImage"];
  };
  "/ai/upscale": {
    post: operations["AIController_aiUpscaleImage"];
  };
  "/ai/classify": {
    post: operations["AIController_classify"];
  };
  "/ai/generate-image/suggest-tags": {
    get: operations["AIController_generateImageTags"];
  };
  "/ai/generate-voice": {
    get: operations["AIController_generateVoice"];
  };
  "/ai/module/train": {
    post: operations["AIModuleController_trainModule"];
  };
  "/ai/module/all": {
    get: operations["AIModuleController_allModules"];
  };
  "/ai/module/{id}": {
    get: operations["AIModuleController_getModule"];
    delete: operations["AIModuleController_deleteModule"];
  };
  "/ai/module/buy-training-steps": {
    post: operations["AIModuleController_buyTrainingSteps"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ApiError: {
      statusCode: number;
      message: string;
    };
    CreateUserRequest: {
      /** @description ReCAPTCHA response token for the novelai.net domain */
      recaptcha: string;
      /** @description Required access key */
      key: string;
      /** @description SHA-256 hashed email in hexadecimal */
      email?: string;
      /** @description Email address (provided as cleartext for email verification, stored hashed) */
      emailCleartext?: string;
      /** @description Subscription gift key, if provided will be automatically activated upon registration */
      giftkey?: string;
    };
    SuccessfulLoginResponse: {
      /** @description Access Token to be used in the Authorization header in the format of "Bearer ${accessToken}" */
      accessToken: string;
    };
    LoginRequest: {
      /** @description Required access key */
      key: string;
    };
    ChangeAccessKeyRequest: {
      /** @description Current access key */
      currentAccessKey: string;
      /** @description New access key */
      newAccessKey: string;
      /** @description New email address */
      newEmail?: string;
    };
    EmailVerificationStartRequest: {
      email: string;
    };
    EmailVerificationRequest: {
      verificationToken: string;
    };
    AccountInformationResponse: {
      emailVerified: boolean;
      emailVerificationLetterSent: boolean;
      trialActivated: boolean;
      trialActionsLeft: number;
      trialImagesLeft: number;
      accountCreatedAt: number;
    };
    DeletionStartRequest: {
      /** @description Target email for account deletion */
      email: string;
    };
    DeletionFinishRequest: {
      /** @description Deletion token provided in the email letter */
      deletionToken: string;
    };
    RecoveryStartRequest: {
      /** @description Target email for account recovery */
      email: string;
    };
    RecoveryFinishRequest: {
      /** @description Recovery token provided in the email letter */
      recoveryToken: string;
      /** @description New access key */
      newAccessKey: string;
      /**
       * @description Should the server reset keystore and remove objects of stories and storycontent type?
       * @default false
       */
      deleteContent: boolean;
    };
    PriorityResponse: {
      maxPriorityActions: number;
      nextRefillAt: number;
      taskPriority: number;
    };
    SubscriptionTierPerks: {
      /** @description Amount of max priority actions */
      maxPriorityActions: number;
      /** @description Start priority amount */
      startPriority: number;
      /** @description Amount of granted context tokens */
      contextTokens: number;
      /** @description Is max priority unlimited */
      unlimitedMaxPriority: boolean;
      /** @description Amount of module training steps granted every month */
      moduleTrainingSteps: number;
    };
    SubscriptionAvailableTrainingSteps: {
      /** @description Amount of available fixed module training steps left (reset every month) */
      fixedTrainingStepsLeft: number;
      /** @description Amount of available purchased module training steps left */
      purchasedTrainingSteps: number;
    };
    SubscriptionResponse: {
      /** @description Subscription internal tier number, see SubscriptionTiers enum */
      tier: number;
      /** @description Is subscription active as of the moment of the request */
      active: boolean;
      /** @description UNIX timestamp of subscription expiration */
      expiresAt: number;
      /** @description Subscription perks */
      perks: components["schemas"]["SubscriptionTierPerks"];
      /** @description Payment processor arbitrary data */
      paymentProcessorData: Record<string, never>;
      /** @description Amount of available module training steps left */
      trainingStepsLeft: components["schemas"]["SubscriptionAvailableTrainingSteps"];
    };
    GetKeystoreResponse: {
      keystore: string | null;
    };
    UserAccountDataResponse: {
      priority: components["schemas"]["PriorityResponse"];
      subscription: components["schemas"]["SubscriptionResponse"];
      keystore: components["schemas"]["GetKeystoreResponse"];
      settings: string | null;
      information: components["schemas"]["AccountInformationResponse"];
    };
    GiftKeysResponse: {
      giftKeys: Record<string, never>[];
    };
    UpdateKeystoreRequest: {
      /** @description Base64-encoded keystore (or empty string to clear) */
      keystore: string;
      /** @description Current change index */
      changeIndex?: number;
    };
    UserData: {
      /** @description Object ID */
      id: string;
      /** @description Accompanying non confidential information */
      meta: string;
      /** @description Base64-encoded buffer */
      data: string;
      /** @description UNIX timestamp */
      lastUpdatedAt: number;
      /** @description Incremental revision of the object */
      changeIndex: number;
      type: string;
    };
    ObjectsResponse: {
      objects: components["schemas"]["UserData"][];
    };
    UserDataInput: {
      /** @description Accompanying non confidential information */
      meta: string;
      /** @description Base64-encoded buffer */
      data: string;
      /** @description Current change index */
      changeIndex?: number;
    };
    CreatePersistentTokenInput: {
      /** @description Overwrite existing token */
      overwrite?: boolean;
    };
    CreatePersistentTokenResponse: {
      token: string | null;
    };
    UserSubmissionInput: {
      /** @description Base64-encoded buffer */
      data: string;
      dataName: string;
      authorName: string;
      authorEmail: string;
      socials: string;
      mediums: string;
      event: string;
    };
    UserSubmissionVoteInput: {
      id: string;
    };
    BindSubscriptionRequest: {
      /**
       * @description Subscription payment processor
       * @enum {string}
       */
      paymentProcessor: "paddle" | "giftkey" | "trial";
      /** @description Payment processor ID */
      subscriptionId: string;
      /**
       * @description Whether the user confirmed replacing the subscription
       * @default false
       */
      confirmedReplace?: Record<string, never>;
      /**
       * @description Whether the user confirmed ignoring the subscription
       * @default false
       */
      confirmedIgnore?: Record<string, never>;
    };
    ChangeSubscriptionPlanRequest: {
      /**
       * @description New plan SKU
       * @enum {number}
       */
      newSubscriptionPlan: 0 | 1 | 2 | 3;
    };
    AiGenerateParameters: {
      stop_sequences?: number[][];
      bad_words_ids?: number[][];
      /**
       * @description If false, input and output strings should be Base64-encoded uint16 numbers representing tokens
       * @default false
       */
      use_string?: boolean;
      logit_bias?: number[][];
      /**
       * @example [
       *   {
       *     "sequence": [
       *       9288,
       *       286,
       *       10690
       *     ],
       *     "bias": 4,
       *     "ensure_sequence_finish": true,
       *     "generate_once": true
       *   },
       *   {
       *     "sequence": [
       *       9288,
       *       286
       *     ],
       *     "bias": 2
       *   }
       * ]
       */
      logit_bias_exp?: {
          sequence: number[];
          /** Format: float */
          bias: number;
          ensure_sequence_finish?: boolean;
          generate_once?: boolean;
        }[];
      order?: number[];
      repetition_penalty_whitelist?: number[];
      temperature?: number;
      min_length: number;
      max_length: number;
      do_sample?: boolean;
      early_stopping?: boolean;
      num_beams?: number;
      top_k?: number;
      top_a?: number;
      top_p?: number;
      typical_p?: number;
      repetition_penalty?: number;
      pad_token_id?: number;
      bos_token_id?: number;
      eos_token_id?: number;
      length_penalty?: number;
      no_repeat_ngram_size?: number;
      encoder_no_repeat_ngram_size?: number;
      num_return_sequences?: number;
      max_time?: number;
      use_cache?: boolean;
      num_beam_groups?: number;
      diversity_penalty?: number;
      tail_free_sampling?: number;
      repetition_penalty_range?: number;
      repetition_penalty_slope?: number;
      get_hidden_states?: boolean;
      repetition_penalty_frequency?: number;
      repetition_penalty_presence?: number;
      next_word?: boolean;
      prefix?: string;
      output_nonzero_probs?: boolean;
      generate_until_sentence?: boolean;
      num_logprobs?: number;
      cfg_uc?: string;
      cfg_scale?: number;
      cfg_alpha?: number;
      phrase_rep_pen?: string;
      top_g?: number;
      mirostat_tau?: number;
      mirostat_lr?: number;
    };
    AiGenerateRequest: {
      /**
       * @description Input for the text generation model
       * @example Text generation example.
       */
      input: string;
      /**
       * @description Used text generation model
       * @default euterpe-v2
       * @enum {string}
       */
      model: "2.7B" | "6B-v4" | "euterpe-v2" | "genji-python-6b" | "genji-jp-6b" | "genji-jp-6b-v2" | "krake-v2" | "hypebot" | "infillmodel" | "cassandra" | "sigurd-2.9b-v1" | "blue" | "red" | "green" | "purple" | "clio-v1" | "kayra-v1";
      /**
       * @description Generation parameters
       * @example {
       *   "use_string": true,
       *   "temperature": 1,
       *   "min_length": 10,
       *   "max_length": 30
       * }
       */
      parameters: components["schemas"]["AiGenerateParameters"];
    };
    AiGenerateResponse: {
      /** @description Output from the text generation model, if defined */
      output?: string;
      /** @description Error from the generation node, if defined */
      error?: string;
    };
    AiGeneratePromptRequest: {
      /**
       * @description Used text generation model
       * @default euterpe-v2
       * @enum {string}
       */
      model: "2.7B" | "6B-v4" | "euterpe-v2" | "genji-python-6b" | "genji-jp-6b" | "genji-jp-6b-v2" | "krake-v2" | "hypebot" | "infillmodel" | "cassandra" | "sigurd-2.9b-v1" | "blue" | "red" | "green" | "purple" | "clio-v1" | "kayra-v1";
      /**
       * @description Input for the text generation model
       * @example Text generation example.
       */
      prompt: string;
      temp: number;
      tokens_to_generate: number;
    };
    AiGeneratePromptResponse: {
      generated_text: string;
    };
    AiGenerateStreamableResponse: {
      /** @description Incrementing token pointer */
      ptr?: number;
      /** @description Generated token */
      token?: string;
      /** @description Set to true if the token is final and the generation ended */
      final?: boolean;
      /** @description Error from the generation node, if defined. Usually means the end of stream */
      error?: string;
    };
    AiAnnotateImageRequest: {
      /**
       * @description Model to use
       * @enum {string}
       */
      model: "canny" | "hed" | "midas" | "mlsd" | "openpose" | "uniformer" | "fake_scribble";
      /** @description Annotation parameters (model specific) */
      parameters: Record<string, never>;
    };
    AiGenerateImageRequest: {
      /**
       * @description Input for the text generation model
       * @example Image generation example.
       */
      input: string;
      /**
       * @description Used image generation model
       * @enum {string}
       */
      model: "nai-diffusion" | "safe-diffusion" | "nai-diffusion-furry" | "custom" | "nai-diffusion-inpainting" | "nai-diffusion-3-inpainting" | "safe-diffusion-inpainting" | "furry-diffusion-inpainting" | "kandinsky-vanilla" | "nai-diffusion-2" | "nai-diffusion-3";
      /**
       * @description Action to use, default is generate
       * @enum {string}
       */
      action?: "generate" | "img2img" | "infill";
      /** @description Generation parameters (model specific) */
      parameters: Record<string, never>;
      /** @description Custom image generation URL */
      url?: string;
    };
    AiGenerateImageResponse: {
      /** @description Incrementing version pointer */
      ptr?: number;
      /** @description Generated image in base64 */
      image?: string;
      /** @description Set to true if the image is final and the generation ended */
      final?: boolean;
      /** @description Error from the generation node, if defined. Usually means the end of stream */
      error?: string;
    };
    AiUpscaleImageRequest: {
      /** @description Image in base64 */
      image: string;
      /** @description Width of the input image */
      width: number;
      /** @description Height of the input image */
      height: number;
      /**
       * @description Upscale factor
       * @default 4
       * @enum {number}
       */
      scale: 2 | 4;
    };
    AiSequenceClassificationResponse: {
      /**
       * @description Output, if defined
       * @example [
       *   [
       *     {
       *       "label": "label",
       *       "score": 0
       *     }
       *   ],
       *   {
       *     "scores": [
       *       [
       *         0.9600785970687866,
       *         0.01683211140334606,
       *         0.014393973164260387,
       *         0.008695312775671482
       *       ]
       *     ]
       *   }
       * ]
       */
      output?: {
          label?: string;
          score?: number;
        }[] | {
        scores?: number[];
      };
      /** @description Error, if defined */
      error?: string;
    };
    AiRequestImageGenerationTag: {
      tag: string;
      count: number;
      confidence: number;
    };
    AiRequestImageGenerationTagsResponse: {
      tags: components["schemas"]["AiRequestImageGenerationTag"][];
    };
    AiModuleTrainRequest: {
      /** @description Base64-encoded data if ready or it's a training request, error text if error */
      data: string;
      /** @description Learning rate */
      lr: number;
      /** @description Training steps */
      steps: number;
      /**
       * @description Used text generation model for module training
       * @default euterpe-v2
       */
      model: string;
      name: string;
      description: string;
    };
    AiModuleDto: {
      /** @description Base64-encoded data if ready or it's a training request, error text if error */
      data: string;
      /** @description Learning rate */
      lr: number;
      /** @description Training steps */
      steps: number;
      /**
       * @description Used text generation model for module training
       * @default euterpe-v2
       */
      model: string;
      /** @description UNIX timestamp */
      lastUpdatedAt: number;
      /** @enum {string} */
      status: "pending" | "training" | "ready" | "error";
      /** @description Recorded loss values */
      lossHistory: number[];
      id: string;
      name: string;
      description: string;
    };
    BuyTrainingStepsRequest: {
      /** @description Amount of module training steps to purchase. */
      amount: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_healthCheck: {
    responses: {
      /** @description Everything is running fine. */
      200: {
        content: never;
      };
    };
  };
  UserController_createUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequest"];
      };
    };
    responses: {
      /** @description The user has been successfully created. */
      201: {
        content: {
          "application/json": components["schemas"]["SuccessfulLoginResponse"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_loginUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Login successful. */
      201: {
        content: {
          "application/json": components["schemas"]["SuccessfulLoginResponse"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Key is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_changeAccessKey: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeAccessKeyRequest"];
      };
    };
    responses: {
      /** @description Access Key change successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessfulLoginResponse"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_requestEmailVerification: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailVerificationStartRequest"];
      };
    };
    responses: {
      /** @description Email verification letter has been sent. */
      201: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_verifyEmail: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailVerificationRequest"];
      };
    };
    responses: {
      /** @description The email has been successfully verified. */
      200: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Verification token was not found. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getAccountInformation: {
    responses: {
      /** @description Account information */
      200: {
        content: {
          "application/json": components["schemas"]["AccountInformationResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_requestAccountDeletion: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeletionStartRequest"];
      };
    };
    responses: {
      /** @description Your request has been processed. If the email address provided is registered, it will receive a letter with further instructions. */
      202: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Cannot delete accounts with active recurring subscriptions. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_deleteAccount: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeletionFinishRequest"];
      };
    };
    responses: {
      /** @description Account deletion successful. */
      200: {
        content: never;
      };
      /** @description Deletion token was not found. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Cannot delete accounts with active recurring subscriptions. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_requestAccountRecovery: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RecoveryStartRequest"];
      };
    };
    responses: {
      /** @description Your request has been processed. If the email address provided is registered, it will receive a letter with further instructions. */
      202: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_recoverAccount: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RecoveryFinishRequest"];
      };
    };
    responses: {
      /** @description Account recovery successful. */
      201: {
        content: {
          "application/json": components["schemas"]["SuccessfulLoginResponse"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Recovery token was not found. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_deleteAccountUnchecked: {
    responses: {
      /** @description Account deletion successful. */
      200: {
        content: never;
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Cannot delete accounts with active recurring subscriptions. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getUserData: {
    responses: {
      /** @description Various user information. */
      200: {
        content: {
          "application/json": components["schemas"]["UserAccountDataResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getCurrentPriority: {
    responses: {
      /** @description Amount of max priority actions left, next max priority action refill (UNIX timestamp) and current task priority. */
      200: {
        content: {
          "application/json": components["schemas"]["PriorityResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getGiftKeys: {
    responses: {
      /** @description Purchased Gift Keys. */
      200: {
        content: {
          "application/json": components["schemas"]["GiftKeysResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getSubscription: {
    responses: {
      /** @description Current subscription, date of expiry and perks. */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getKeystore: {
    responses: {
      /** @description Keystore buffer in Base64 format. */
      200: {
        content: {
          "application/json": components["schemas"]["GetKeystoreResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_updateKeystore: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateKeystoreRequest"];
      };
    };
    responses: {
      /** @description Edit is successful. */
      200: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getObjects: {
    parameters: {
      path: {
        type: string;
      };
    };
    responses: {
      /** @description List of serverside-stored objects of that type. */
      200: {
        content: {
          "application/json": components["schemas"]["ObjectsResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_createObject: {
    parameters: {
      path: {
        type: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDataInput"];
      };
    };
    responses: {
      /** @description Object created successfully. */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Specified object was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getObject: {
    parameters: {
      path: {
        type: string;
        id: string;
      };
    };
    responses: {
      /** @description Found object. */
      200: {
        content: {
          "application/json": components["schemas"]["UserData"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_deleteObject: {
    parameters: {
      path: {
        id: string;
        type: string;
      };
    };
    responses: {
      /** @description Object deleted successfully. */
      200: {
        content: {
          "application/json": components["schemas"]["UserData"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Specified object was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_editObject: {
    parameters: {
      path: {
        id: string;
        type: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDataInput"];
      };
    };
    responses: {
      /** @description Object edited successfully. */
      200: {
        content: {
          "application/json": components["schemas"]["UserData"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Specified object was not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict occured while updating this object. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getClientSettings: {
    responses: {
      /** @description Client settings in an arbitrary format. */
      200: {
        content: never;
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_updateClientSettings: {
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      /** @description Edit is successful. */
      200: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_createPersistentToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePersistentTokenInput"];
      };
    };
    responses: {
      /** @description Token created successfully. */
      200: {
        content: {
          "application/json": components["schemas"]["CreatePersistentTokenResponse"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["CreatePersistentTokenResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_postUserSubmission: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSubmissionInput"];
      };
    };
    responses: {
      /** @description Submission is successful. */
      200: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getUserSubmission: {
    parameters: {
      path: {
        event: string;
      };
    };
    responses: {
      /** @description User submission */
      200: {
        content: never;
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_getUserSubmissionVotes: {
    parameters: {
      path: {
        event: string;
      };
    };
    responses: {
      /** @description User submission votes */
      200: {
        content: never;
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_voteSubmission: {
    parameters: {
      path: {
        event: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSubmissionVoteInput"];
      };
    };
    responses: {
      /** @description Vote is successful. */
      200: {
        content: never;
      };
      201: {
        content: never;
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  UserController_retractSubmissionVote: {
    parameters: {
      path: {
        event: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSubmissionVoteInput"];
      };
    };
    responses: {
      /** @description Vote is successful. */
      200: {
        content: never;
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  SubscriptionController_bindSubscription: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BindSubscriptionRequest"];
      };
    };
    responses: {
      /** @description Subscription has been bound properly. */
      201: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Subscription ID was not found */
      404: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict occured while binding subscription. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  SubscriptionController_changeSubscriptionPlan: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeSubscriptionPlanRequest"];
      };
    };
    responses: {
      /** @description Subscription plan has been changed properly. */
      200: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Subscription SKU was not found */
      404: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict occured while changing subscription plan. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIController_aiGenerate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiGenerateRequest"];
      };
    };
    responses: {
      /** @description The output has been successfully generated. */
      201: {
        content: {
          "application/json": components["schemas"]["AiGenerateResponse"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An active subscription is required to access this endpoint. */
      402: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIController_aiGeneratePrompt: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiGeneratePromptRequest"];
      };
    };
    responses: {
      /** @description Prompt has been generated. */
      201: {
        content: {
          "application/json": components["schemas"]["AiGeneratePromptResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIController_aiGenerateStreamable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiGenerateRequest"];
      };
    };
    responses: {
      /** @description The request has been accepted and the output is generating (SSE). */
      201: {
        content: {
          "application/json": components["schemas"]["AiGenerateStreamableResponse"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An active subscription is required to access this endpoint. */
      402: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIController_annotateImage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiAnnotateImageRequest"];
      };
    };
    responses: {
      /** @description The request has been accepted and the output is generating (ZIP attachment). */
      201: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An active subscription is required to access this endpoint. */
      402: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIController_aiGenerateImage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiGenerateImageRequest"];
      };
    };
    responses: {
      /** @description The request has been accepted and the output is generating (SSE / ZIP attachment). */
      201: {
        content: {
          "application/json": components["schemas"]["AiGenerateImageResponse"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An active subscription is required to access this endpoint. */
      402: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIController_aiUpscaleImage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiUpscaleImageRequest"];
      };
    };
    responses: {
      /** @description The request has been accepted and the output is generating (ZIP attachment). */
      201: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An active subscription is required to access this endpoint. */
      402: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIController_classify: {
    responses: {
      /** @description The output has been successfully generated. */
      201: {
        content: {
          "application/json": components["schemas"]["AiSequenceClassificationResponse"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An active subscription is required to access this endpoint. */
      402: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIController_generateImageTags: {
    parameters: {
      query: {
        model: string;
        prompt: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AiRequestImageGenerationTagsResponse"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIController_generateVoice: {
    parameters: {
      query: {
        text: string;
        seed: string;
        voice: number;
        opus: boolean;
        version: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIModuleController_trainModule: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AiModuleTrainRequest"];
      };
    };
    responses: {
      /** @description The training request has been successfully sent. */
      201: {
        content: {
          "application/json": components["schemas"]["AiModuleDto"];
        };
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An active subscription required to access this endpoint. */
      402: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIModuleController_allModules: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AiModuleDto"][];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIModuleController_getModule: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AiModuleDto"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Module not found */
      404: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIModuleController_deleteModule: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Module deleted successfully. */
      200: {
        content: {
          "application/json": components["schemas"]["AiModuleDto"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Module not found */
      404: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict error occured. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
  AIModuleController_buyTrainingSteps: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BuyTrainingStepsRequest"];
      };
    };
    responses: {
      /** @description Steps have been purchased properly. */
      200: {
        content: never;
      };
      /** @description A validation error occured. */
      400: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description Access Token is incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description A conflict occured while buying training steps. */
      409: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
      /** @description An unknown error occured. */
      500: {
        content: {
          "application/json": components["schemas"]["ApiError"];
        };
      };
    };
  };
}
